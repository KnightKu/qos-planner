// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace rpc {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_message_2eproto();
void protobuf_AssignDesc_message_2eproto();
void protobuf_ShutdownFile_message_2eproto();

class Request;
class Request_DeleteRequest;
class Request_ResourceRequest;
class Request_ResourceRequest_ResourceDefinition;
class Error;
class Reply;
class Message;

enum Request_Type {
  Request_Type_RESERVE = 0,
  Request_Type_DELETE = 1
};
bool Request_Type_IsValid(int value);
const Request_Type Request_Type_Type_MIN = Request_Type_RESERVE;
const Request_Type Request_Type_Type_MAX = Request_Type_DELETE;
const int Request_Type_Type_ARRAYSIZE = Request_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Request_Type_descriptor();
inline const ::std::string& Request_Type_Name(Request_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Request_Type_descriptor(), value);
}
inline bool Request_Type_Parse(
    const ::std::string& name, Request_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Request_Type>(
    Request_Type_descriptor(), name, value);
}
enum Error_errorType {
  Error_errorType_EARGS = 0,
  Error_errorType_EUNKNOWN = 1
};
bool Error_errorType_IsValid(int value);
const Error_errorType Error_errorType_errorType_MIN = Error_errorType_EARGS;
const Error_errorType Error_errorType_errorType_MAX = Error_errorType_EUNKNOWN;
const int Error_errorType_errorType_ARRAYSIZE = Error_errorType_errorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Error_errorType_descriptor();
inline const ::std::string& Error_errorType_Name(Error_errorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Error_errorType_descriptor(), value);
}
inline bool Error_errorType_Parse(
    const ::std::string& name, Error_errorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Error_errorType>(
    Error_errorType_descriptor(), name, value);
}
enum Message_Type {
  Message_Type_REQUEST = 0,
  Message_Type_REPLY = 1
};
bool Message_Type_IsValid(int value);
const Message_Type Message_Type_Type_MIN = Message_Type_REQUEST;
const Message_Type Message_Type_Type_MAX = Message_Type_REPLY;
const int Message_Type_Type_ARRAYSIZE = Message_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Message_Type_descriptor();
inline const ::std::string& Message_Type_Name(Message_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Message_Type_descriptor(), value);
}
inline bool Message_Type_Parse(
    const ::std::string& name, Message_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Message_Type>(
    Message_Type_descriptor(), name, value);
}
// ===================================================================

class Request_DeleteRequest : public ::google::protobuf::Message {
 public:
  Request_DeleteRequest();
  virtual ~Request_DeleteRequest();

  Request_DeleteRequest(const Request_DeleteRequest& from);

  inline Request_DeleteRequest& operator=(const Request_DeleteRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request_DeleteRequest& default_instance();

  void Swap(Request_DeleteRequest* other);

  // implements Message ----------------------------------------------

  Request_DeleteRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request_DeleteRequest& from);
  void MergeFrom(const Request_DeleteRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string ID = 1;
  inline int id_size() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline const ::std::string& id(int index) const;
  inline ::std::string* mutable_id(int index);
  inline void set_id(int index, const ::std::string& value);
  inline void set_id(int index, const char* value);
  inline void set_id(int index, const char* value, size_t size);
  inline ::std::string* add_id();
  inline void add_id(const ::std::string& value);
  inline void add_id(const char* value);
  inline void add_id(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& id() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_id();

  // optional bool all = 2;
  inline bool has_all() const;
  inline void clear_all();
  static const int kAllFieldNumber = 2;
  inline bool all() const;
  inline void set_all(bool value);

  // @@protoc_insertion_point(class_scope:rpc.Request.DeleteRequest)
 private:
  inline void set_has_all();
  inline void clear_has_all();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> id_;
  bool all_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Request_DeleteRequest* default_instance_;
};
// -------------------------------------------------------------------

class Request_ResourceRequest_ResourceDefinition : public ::google::protobuf::Message {
 public:
  Request_ResourceRequest_ResourceDefinition();
  virtual ~Request_ResourceRequest_ResourceDefinition();

  Request_ResourceRequest_ResourceDefinition(const Request_ResourceRequest_ResourceDefinition& from);

  inline Request_ResourceRequest_ResourceDefinition& operator=(const Request_ResourceRequest_ResourceDefinition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request_ResourceRequest_ResourceDefinition& default_instance();

  void Swap(Request_ResourceRequest_ResourceDefinition* other);

  // implements Message ----------------------------------------------

  Request_ResourceRequest_ResourceDefinition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request_ResourceRequest_ResourceDefinition& from);
  void MergeFrom(const Request_ResourceRequest_ResourceDefinition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string file = 1;
  inline bool has_file() const;
  inline void clear_file();
  static const int kFileFieldNumber = 1;
  inline const ::std::string& file() const;
  inline void set_file(const ::std::string& value);
  inline void set_file(const char* value);
  inline void set_file(const char* value, size_t size);
  inline ::std::string* mutable_file();
  inline ::std::string* release_file();
  inline void set_allocated_file(::std::string* file);

  // optional int32 throughputMB = 2;
  inline bool has_throughputmb() const;
  inline void clear_throughputmb();
  static const int kThroughputMBFieldNumber = 2;
  inline ::google::protobuf::int32 throughputmb() const;
  inline void set_throughputmb(::google::protobuf::int32 value);

  // optional int64 tstart = 3;
  inline bool has_tstart() const;
  inline void clear_tstart();
  static const int kTstartFieldNumber = 3;
  inline ::google::protobuf::int64 tstart() const;
  inline void set_tstart(::google::protobuf::int64 value);

  // optional int64 tstop = 4;
  inline bool has_tstop() const;
  inline void clear_tstop();
  static const int kTstopFieldNumber = 4;
  inline ::google::protobuf::int64 tstop() const;
  inline void set_tstop(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:rpc.Request.ResourceRequest.ResourceDefinition)
 private:
  inline void set_has_file();
  inline void clear_has_file();
  inline void set_has_throughputmb();
  inline void clear_has_throughputmb();
  inline void set_has_tstart();
  inline void clear_has_tstart();
  inline void set_has_tstop();
  inline void clear_has_tstop();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* file_;
  ::google::protobuf::int64 tstart_;
  ::google::protobuf::int64 tstop_;
  ::google::protobuf::int32 throughputmb_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Request_ResourceRequest_ResourceDefinition* default_instance_;
};
// -------------------------------------------------------------------

class Request_ResourceRequest : public ::google::protobuf::Message {
 public:
  Request_ResourceRequest();
  virtual ~Request_ResourceRequest();

  Request_ResourceRequest(const Request_ResourceRequest& from);

  inline Request_ResourceRequest& operator=(const Request_ResourceRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request_ResourceRequest& default_instance();

  void Swap(Request_ResourceRequest* other);

  // implements Message ----------------------------------------------

  Request_ResourceRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request_ResourceRequest& from);
  void MergeFrom(const Request_ResourceRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Request_ResourceRequest_ResourceDefinition ResourceDefinition;

  // accessors -------------------------------------------------------

  // required string ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // repeated .rpc.Request.ResourceRequest.ResourceDefinition requestedResources = 2;
  inline int requestedresources_size() const;
  inline void clear_requestedresources();
  static const int kRequestedResourcesFieldNumber = 2;
  inline const ::rpc::Request_ResourceRequest_ResourceDefinition& requestedresources(int index) const;
  inline ::rpc::Request_ResourceRequest_ResourceDefinition* mutable_requestedresources(int index);
  inline ::rpc::Request_ResourceRequest_ResourceDefinition* add_requestedresources();
  inline const ::google::protobuf::RepeatedPtrField< ::rpc::Request_ResourceRequest_ResourceDefinition >&
      requestedresources() const;
  inline ::google::protobuf::RepeatedPtrField< ::rpc::Request_ResourceRequest_ResourceDefinition >*
      mutable_requestedresources();

  // @@protoc_insertion_point(class_scope:rpc.Request.ResourceRequest)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::google::protobuf::RepeatedPtrField< ::rpc::Request_ResourceRequest_ResourceDefinition > requestedresources_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Request_ResourceRequest* default_instance_;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  enum RtCase {
    kResourceRequest = 2,
    kDeleteRequest = 3,
    RT_NOT_SET = 0,
  };

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Request_DeleteRequest DeleteRequest;
  typedef Request_ResourceRequest ResourceRequest;

  typedef Request_Type Type;
  static const Type RESERVE = Request_Type_RESERVE;
  static const Type DELETE = Request_Type_DELETE;
  static inline bool Type_IsValid(int value) {
    return Request_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Request_Type_Type_MIN;
  static const Type Type_MAX =
    Request_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Request_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Request_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Request_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Request_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .rpc.Request.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::rpc::Request_Type type() const;
  inline void set_type(::rpc::Request_Type value);

  // optional .rpc.Request.ResourceRequest resourceRequest = 2;
  inline bool has_resourcerequest() const;
  inline void clear_resourcerequest();
  static const int kResourceRequestFieldNumber = 2;
  inline const ::rpc::Request_ResourceRequest& resourcerequest() const;
  inline ::rpc::Request_ResourceRequest* mutable_resourcerequest();
  inline ::rpc::Request_ResourceRequest* release_resourcerequest();
  inline void set_allocated_resourcerequest(::rpc::Request_ResourceRequest* resourcerequest);

  // optional .rpc.Request.DeleteRequest deleteRequest = 3;
  inline bool has_deleterequest() const;
  inline void clear_deleterequest();
  static const int kDeleteRequestFieldNumber = 3;
  inline const ::rpc::Request_DeleteRequest& deleterequest() const;
  inline ::rpc::Request_DeleteRequest* mutable_deleterequest();
  inline ::rpc::Request_DeleteRequest* release_deleterequest();
  inline void set_allocated_deleterequest(::rpc::Request_DeleteRequest* deleterequest);

  inline RtCase rt_case() const;
  // @@protoc_insertion_point(class_scope:rpc.Request)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_resourcerequest();
  inline void set_has_deleterequest();

  inline bool has_rt();
  void clear_rt();
  inline void clear_has_rt();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  union RtUnion {
    ::rpc::Request_ResourceRequest* resourcerequest_;
    ::rpc::Request_DeleteRequest* deleterequest_;
  } rt_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class Error : public ::google::protobuf::Message {
 public:
  Error();
  virtual ~Error();

  Error(const Error& from);

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Error& default_instance();

  void Swap(Error* other);

  // implements Message ----------------------------------------------

  Error* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Error& from);
  void MergeFrom(const Error& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Error_errorType errorType;
  static const errorType EARGS = Error_errorType_EARGS;
  static const errorType EUNKNOWN = Error_errorType_EUNKNOWN;
  static inline bool errorType_IsValid(int value) {
    return Error_errorType_IsValid(value);
  }
  static const errorType errorType_MIN =
    Error_errorType_errorType_MIN;
  static const errorType errorType_MAX =
    Error_errorType_errorType_MAX;
  static const int errorType_ARRAYSIZE =
    Error_errorType_errorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  errorType_descriptor() {
    return Error_errorType_descriptor();
  }
  static inline const ::std::string& errorType_Name(errorType value) {
    return Error_errorType_Name(value);
  }
  static inline bool errorType_Parse(const ::std::string& name,
      errorType* value) {
    return Error_errorType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .rpc.Error.errorType error = 1;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 1;
  inline ::rpc::Error_errorType error() const;
  inline void set_error(::rpc::Error_errorType value);

  // optional string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:rpc.Error)
 private:
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* msg_;
  int error_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Error* default_instance_;
};
// -------------------------------------------------------------------

class Reply : public ::google::protobuf::Message {
 public:
  Reply();
  virtual ~Reply();

  Reply(const Reply& from);

  inline Reply& operator=(const Reply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Reply& default_instance();

  void Swap(Reply* other);

  // implements Message ----------------------------------------------

  Reply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Reply& from);
  void MergeFrom(const Reply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 rc = 1;
  inline bool has_rc() const;
  inline void clear_rc();
  static const int kRcFieldNumber = 1;
  inline ::google::protobuf::int32 rc() const;
  inline void set_rc(::google::protobuf::int32 value);

  // optional .rpc.Error error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::rpc::Error& error() const;
  inline ::rpc::Error* mutable_error();
  inline ::rpc::Error* release_error();
  inline void set_allocated_error(::rpc::Error* error);

  // @@protoc_insertion_point(class_scope:rpc.Reply)
 private:
  inline void set_has_rc();
  inline void clear_has_rc();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::rpc::Error* error_;
  ::google::protobuf::int32 rc_;
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Reply* default_instance_;
};
// -------------------------------------------------------------------

class Message : public ::google::protobuf::Message {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  enum RqCase {
    kRequest = 2,
    kReply = 3,
    RQ_NOT_SET = 0,
  };

  void Swap(Message* other);

  // implements Message ----------------------------------------------

  Message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Message_Type Type;
  static const Type REQUEST = Message_Type_REQUEST;
  static const Type REPLY = Message_Type_REPLY;
  static inline bool Type_IsValid(int value) {
    return Message_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Message_Type_Type_MIN;
  static const Type Type_MAX =
    Message_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Message_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Message_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Message_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Message_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .rpc.Message.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::rpc::Message_Type type() const;
  inline void set_type(::rpc::Message_Type value);

  // optional .rpc.Request request = 2;
  inline bool has_request() const;
  inline void clear_request();
  static const int kRequestFieldNumber = 2;
  inline const ::rpc::Request& request() const;
  inline ::rpc::Request* mutable_request();
  inline ::rpc::Request* release_request();
  inline void set_allocated_request(::rpc::Request* request);

  // optional .rpc.Reply reply = 3;
  inline bool has_reply() const;
  inline void clear_reply();
  static const int kReplyFieldNumber = 3;
  inline const ::rpc::Reply& reply() const;
  inline ::rpc::Reply* mutable_reply();
  inline ::rpc::Reply* release_reply();
  inline void set_allocated_reply(::rpc::Reply* reply);

  inline RqCase rq_case() const;
  // @@protoc_insertion_point(class_scope:rpc.Message)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_request();
  inline void set_has_reply();

  inline bool has_rq();
  void clear_rq();
  inline void clear_has_rq();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  union RqUnion {
    ::rpc::Request* request_;
    ::rpc::Reply* reply_;
  } rq_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
  static Message* default_instance_;
};
// ===================================================================


// ===================================================================

// Request_DeleteRequest

// repeated string ID = 1;
inline int Request_DeleteRequest::id_size() const {
  return id_.size();
}
inline void Request_DeleteRequest::clear_id() {
  id_.Clear();
}
inline const ::std::string& Request_DeleteRequest::id(int index) const {
  // @@protoc_insertion_point(field_get:rpc.Request.DeleteRequest.ID)
  return id_.Get(index);
}
inline ::std::string* Request_DeleteRequest::mutable_id(int index) {
  // @@protoc_insertion_point(field_mutable:rpc.Request.DeleteRequest.ID)
  return id_.Mutable(index);
}
inline void Request_DeleteRequest::set_id(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:rpc.Request.DeleteRequest.ID)
  id_.Mutable(index)->assign(value);
}
inline void Request_DeleteRequest::set_id(int index, const char* value) {
  id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:rpc.Request.DeleteRequest.ID)
}
inline void Request_DeleteRequest::set_id(int index, const char* value, size_t size) {
  id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rpc.Request.DeleteRequest.ID)
}
inline ::std::string* Request_DeleteRequest::add_id() {
  return id_.Add();
}
inline void Request_DeleteRequest::add_id(const ::std::string& value) {
  id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:rpc.Request.DeleteRequest.ID)
}
inline void Request_DeleteRequest::add_id(const char* value) {
  id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:rpc.Request.DeleteRequest.ID)
}
inline void Request_DeleteRequest::add_id(const char* value, size_t size) {
  id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:rpc.Request.DeleteRequest.ID)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Request_DeleteRequest::id() const {
  // @@protoc_insertion_point(field_list:rpc.Request.DeleteRequest.ID)
  return id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Request_DeleteRequest::mutable_id() {
  // @@protoc_insertion_point(field_mutable_list:rpc.Request.DeleteRequest.ID)
  return &id_;
}

// optional bool all = 2;
inline bool Request_DeleteRequest::has_all() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request_DeleteRequest::set_has_all() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request_DeleteRequest::clear_has_all() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request_DeleteRequest::clear_all() {
  all_ = false;
  clear_has_all();
}
inline bool Request_DeleteRequest::all() const {
  // @@protoc_insertion_point(field_get:rpc.Request.DeleteRequest.all)
  return all_;
}
inline void Request_DeleteRequest::set_all(bool value) {
  set_has_all();
  all_ = value;
  // @@protoc_insertion_point(field_set:rpc.Request.DeleteRequest.all)
}

// -------------------------------------------------------------------

// Request_ResourceRequest_ResourceDefinition

// optional string file = 1;
inline bool Request_ResourceRequest_ResourceDefinition::has_file() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request_ResourceRequest_ResourceDefinition::set_has_file() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request_ResourceRequest_ResourceDefinition::clear_has_file() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request_ResourceRequest_ResourceDefinition::clear_file() {
  if (file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_->clear();
  }
  clear_has_file();
}
inline const ::std::string& Request_ResourceRequest_ResourceDefinition::file() const {
  // @@protoc_insertion_point(field_get:rpc.Request.ResourceRequest.ResourceDefinition.file)
  return *file_;
}
inline void Request_ResourceRequest_ResourceDefinition::set_file(const ::std::string& value) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_ = new ::std::string;
  }
  file_->assign(value);
  // @@protoc_insertion_point(field_set:rpc.Request.ResourceRequest.ResourceDefinition.file)
}
inline void Request_ResourceRequest_ResourceDefinition::set_file(const char* value) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_ = new ::std::string;
  }
  file_->assign(value);
  // @@protoc_insertion_point(field_set_char:rpc.Request.ResourceRequest.ResourceDefinition.file)
}
inline void Request_ResourceRequest_ResourceDefinition::set_file(const char* value, size_t size) {
  set_has_file();
  if (file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_ = new ::std::string;
  }
  file_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rpc.Request.ResourceRequest.ResourceDefinition.file)
}
inline ::std::string* Request_ResourceRequest_ResourceDefinition::mutable_file() {
  set_has_file();
  if (file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    file_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rpc.Request.ResourceRequest.ResourceDefinition.file)
  return file_;
}
inline ::std::string* Request_ResourceRequest_ResourceDefinition::release_file() {
  clear_has_file();
  if (file_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = file_;
    file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Request_ResourceRequest_ResourceDefinition::set_allocated_file(::std::string* file) {
  if (file_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete file_;
  }
  if (file) {
    set_has_file();
    file_ = file;
  } else {
    clear_has_file();
    file_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rpc.Request.ResourceRequest.ResourceDefinition.file)
}

// optional int32 throughputMB = 2;
inline bool Request_ResourceRequest_ResourceDefinition::has_throughputmb() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request_ResourceRequest_ResourceDefinition::set_has_throughputmb() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request_ResourceRequest_ResourceDefinition::clear_has_throughputmb() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request_ResourceRequest_ResourceDefinition::clear_throughputmb() {
  throughputmb_ = 0;
  clear_has_throughputmb();
}
inline ::google::protobuf::int32 Request_ResourceRequest_ResourceDefinition::throughputmb() const {
  // @@protoc_insertion_point(field_get:rpc.Request.ResourceRequest.ResourceDefinition.throughputMB)
  return throughputmb_;
}
inline void Request_ResourceRequest_ResourceDefinition::set_throughputmb(::google::protobuf::int32 value) {
  set_has_throughputmb();
  throughputmb_ = value;
  // @@protoc_insertion_point(field_set:rpc.Request.ResourceRequest.ResourceDefinition.throughputMB)
}

// optional int64 tstart = 3;
inline bool Request_ResourceRequest_ResourceDefinition::has_tstart() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Request_ResourceRequest_ResourceDefinition::set_has_tstart() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Request_ResourceRequest_ResourceDefinition::clear_has_tstart() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Request_ResourceRequest_ResourceDefinition::clear_tstart() {
  tstart_ = GOOGLE_LONGLONG(0);
  clear_has_tstart();
}
inline ::google::protobuf::int64 Request_ResourceRequest_ResourceDefinition::tstart() const {
  // @@protoc_insertion_point(field_get:rpc.Request.ResourceRequest.ResourceDefinition.tstart)
  return tstart_;
}
inline void Request_ResourceRequest_ResourceDefinition::set_tstart(::google::protobuf::int64 value) {
  set_has_tstart();
  tstart_ = value;
  // @@protoc_insertion_point(field_set:rpc.Request.ResourceRequest.ResourceDefinition.tstart)
}

// optional int64 tstop = 4;
inline bool Request_ResourceRequest_ResourceDefinition::has_tstop() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Request_ResourceRequest_ResourceDefinition::set_has_tstop() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Request_ResourceRequest_ResourceDefinition::clear_has_tstop() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Request_ResourceRequest_ResourceDefinition::clear_tstop() {
  tstop_ = GOOGLE_LONGLONG(0);
  clear_has_tstop();
}
inline ::google::protobuf::int64 Request_ResourceRequest_ResourceDefinition::tstop() const {
  // @@protoc_insertion_point(field_get:rpc.Request.ResourceRequest.ResourceDefinition.tstop)
  return tstop_;
}
inline void Request_ResourceRequest_ResourceDefinition::set_tstop(::google::protobuf::int64 value) {
  set_has_tstop();
  tstop_ = value;
  // @@protoc_insertion_point(field_set:rpc.Request.ResourceRequest.ResourceDefinition.tstop)
}

// -------------------------------------------------------------------

// Request_ResourceRequest

// required string ID = 1;
inline bool Request_ResourceRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request_ResourceRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request_ResourceRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request_ResourceRequest::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& Request_ResourceRequest::id() const {
  // @@protoc_insertion_point(field_get:rpc.Request.ResourceRequest.ID)
  return *id_;
}
inline void Request_ResourceRequest::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:rpc.Request.ResourceRequest.ID)
}
inline void Request_ResourceRequest::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:rpc.Request.ResourceRequest.ID)
}
inline void Request_ResourceRequest::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rpc.Request.ResourceRequest.ID)
}
inline ::std::string* Request_ResourceRequest::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rpc.Request.ResourceRequest.ID)
  return id_;
}
inline ::std::string* Request_ResourceRequest::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Request_ResourceRequest::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rpc.Request.ResourceRequest.ID)
}

// repeated .rpc.Request.ResourceRequest.ResourceDefinition requestedResources = 2;
inline int Request_ResourceRequest::requestedresources_size() const {
  return requestedresources_.size();
}
inline void Request_ResourceRequest::clear_requestedresources() {
  requestedresources_.Clear();
}
inline const ::rpc::Request_ResourceRequest_ResourceDefinition& Request_ResourceRequest::requestedresources(int index) const {
  // @@protoc_insertion_point(field_get:rpc.Request.ResourceRequest.requestedResources)
  return requestedresources_.Get(index);
}
inline ::rpc::Request_ResourceRequest_ResourceDefinition* Request_ResourceRequest::mutable_requestedresources(int index) {
  // @@protoc_insertion_point(field_mutable:rpc.Request.ResourceRequest.requestedResources)
  return requestedresources_.Mutable(index);
}
inline ::rpc::Request_ResourceRequest_ResourceDefinition* Request_ResourceRequest::add_requestedresources() {
  // @@protoc_insertion_point(field_add:rpc.Request.ResourceRequest.requestedResources)
  return requestedresources_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::rpc::Request_ResourceRequest_ResourceDefinition >&
Request_ResourceRequest::requestedresources() const {
  // @@protoc_insertion_point(field_list:rpc.Request.ResourceRequest.requestedResources)
  return requestedresources_;
}
inline ::google::protobuf::RepeatedPtrField< ::rpc::Request_ResourceRequest_ResourceDefinition >*
Request_ResourceRequest::mutable_requestedresources() {
  // @@protoc_insertion_point(field_mutable_list:rpc.Request.ResourceRequest.requestedResources)
  return &requestedresources_;
}

// -------------------------------------------------------------------

// Request

// required .rpc.Request.Type type = 1;
inline bool Request::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::rpc::Request_Type Request::type() const {
  // @@protoc_insertion_point(field_get:rpc.Request.type)
  return static_cast< ::rpc::Request_Type >(type_);
}
inline void Request::set_type(::rpc::Request_Type value) {
  assert(::rpc::Request_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:rpc.Request.type)
}

// optional .rpc.Request.ResourceRequest resourceRequest = 2;
inline bool Request::has_resourcerequest() const {
  return rt_case() == kResourceRequest;
}
inline void Request::set_has_resourcerequest() {
  _oneof_case_[0] = kResourceRequest;
}
inline void Request::clear_resourcerequest() {
  if (has_resourcerequest()) {
    delete rt_.resourcerequest_;
    clear_has_rt();
  }
}
inline const ::rpc::Request_ResourceRequest& Request::resourcerequest() const {
  return has_resourcerequest() ? *rt_.resourcerequest_
                      : ::rpc::Request_ResourceRequest::default_instance();
}
inline ::rpc::Request_ResourceRequest* Request::mutable_resourcerequest() {
  if (!has_resourcerequest()) {
    clear_rt();
    set_has_resourcerequest();
    rt_.resourcerequest_ = new ::rpc::Request_ResourceRequest;
  }
  return rt_.resourcerequest_;
}
inline ::rpc::Request_ResourceRequest* Request::release_resourcerequest() {
  if (has_resourcerequest()) {
    clear_has_rt();
    ::rpc::Request_ResourceRequest* temp = rt_.resourcerequest_;
    rt_.resourcerequest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Request::set_allocated_resourcerequest(::rpc::Request_ResourceRequest* resourcerequest) {
  clear_rt();
  if (resourcerequest) {
    set_has_resourcerequest();
    rt_.resourcerequest_ = resourcerequest;
  }
}

// optional .rpc.Request.DeleteRequest deleteRequest = 3;
inline bool Request::has_deleterequest() const {
  return rt_case() == kDeleteRequest;
}
inline void Request::set_has_deleterequest() {
  _oneof_case_[0] = kDeleteRequest;
}
inline void Request::clear_deleterequest() {
  if (has_deleterequest()) {
    delete rt_.deleterequest_;
    clear_has_rt();
  }
}
inline const ::rpc::Request_DeleteRequest& Request::deleterequest() const {
  return has_deleterequest() ? *rt_.deleterequest_
                      : ::rpc::Request_DeleteRequest::default_instance();
}
inline ::rpc::Request_DeleteRequest* Request::mutable_deleterequest() {
  if (!has_deleterequest()) {
    clear_rt();
    set_has_deleterequest();
    rt_.deleterequest_ = new ::rpc::Request_DeleteRequest;
  }
  return rt_.deleterequest_;
}
inline ::rpc::Request_DeleteRequest* Request::release_deleterequest() {
  if (has_deleterequest()) {
    clear_has_rt();
    ::rpc::Request_DeleteRequest* temp = rt_.deleterequest_;
    rt_.deleterequest_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Request::set_allocated_deleterequest(::rpc::Request_DeleteRequest* deleterequest) {
  clear_rt();
  if (deleterequest) {
    set_has_deleterequest();
    rt_.deleterequest_ = deleterequest;
  }
}

inline bool Request::has_rt() {
  return rt_case() != RT_NOT_SET;
}
inline void Request::clear_has_rt() {
  _oneof_case_[0] = RT_NOT_SET;
}
inline Request::RtCase Request::rt_case() const {
  return Request::RtCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Error

// required .rpc.Error.errorType error = 1;
inline bool Error::has_error() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Error::set_has_error() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Error::clear_has_error() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Error::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::rpc::Error_errorType Error::error() const {
  // @@protoc_insertion_point(field_get:rpc.Error.error)
  return static_cast< ::rpc::Error_errorType >(error_);
}
inline void Error::set_error(::rpc::Error_errorType value) {
  assert(::rpc::Error_errorType_IsValid(value));
  set_has_error();
  error_ = value;
  // @@protoc_insertion_point(field_set:rpc.Error.error)
}

// optional string msg = 2;
inline bool Error::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Error::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Error::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Error::clear_msg() {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& Error::msg() const {
  // @@protoc_insertion_point(field_get:rpc.Error.msg)
  return *msg_;
}
inline void Error::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set:rpc.Error.msg)
}
inline void Error::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:rpc.Error.msg)
}
inline void Error::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rpc.Error.msg)
}
inline ::std::string* Error::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rpc.Error.msg)
  return msg_;
}
inline ::std::string* Error::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Error::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rpc.Error.msg)
}

// -------------------------------------------------------------------

// Reply

// required int32 rc = 1;
inline bool Reply::has_rc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Reply::set_has_rc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Reply::clear_has_rc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Reply::clear_rc() {
  rc_ = 0;
  clear_has_rc();
}
inline ::google::protobuf::int32 Reply::rc() const {
  // @@protoc_insertion_point(field_get:rpc.Reply.rc)
  return rc_;
}
inline void Reply::set_rc(::google::protobuf::int32 value) {
  set_has_rc();
  rc_ = value;
  // @@protoc_insertion_point(field_set:rpc.Reply.rc)
}

// optional .rpc.Error error = 2;
inline bool Reply::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Reply::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Reply::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Reply::clear_error() {
  if (error_ != NULL) error_->::rpc::Error::Clear();
  clear_has_error();
}
inline const ::rpc::Error& Reply::error() const {
  // @@protoc_insertion_point(field_get:rpc.Reply.error)
  return error_ != NULL ? *error_ : *default_instance_->error_;
}
inline ::rpc::Error* Reply::mutable_error() {
  set_has_error();
  if (error_ == NULL) error_ = new ::rpc::Error;
  // @@protoc_insertion_point(field_mutable:rpc.Reply.error)
  return error_;
}
inline ::rpc::Error* Reply::release_error() {
  clear_has_error();
  ::rpc::Error* temp = error_;
  error_ = NULL;
  return temp;
}
inline void Reply::set_allocated_error(::rpc::Error* error) {
  delete error_;
  error_ = error;
  if (error) {
    set_has_error();
  } else {
    clear_has_error();
  }
  // @@protoc_insertion_point(field_set_allocated:rpc.Reply.error)
}

// -------------------------------------------------------------------

// Message

// required .rpc.Message.Type type = 1;
inline bool Message::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Message::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Message::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Message::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::rpc::Message_Type Message::type() const {
  // @@protoc_insertion_point(field_get:rpc.Message.type)
  return static_cast< ::rpc::Message_Type >(type_);
}
inline void Message::set_type(::rpc::Message_Type value) {
  assert(::rpc::Message_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:rpc.Message.type)
}

// optional .rpc.Request request = 2;
inline bool Message::has_request() const {
  return rq_case() == kRequest;
}
inline void Message::set_has_request() {
  _oneof_case_[0] = kRequest;
}
inline void Message::clear_request() {
  if (has_request()) {
    delete rq_.request_;
    clear_has_rq();
  }
}
inline const ::rpc::Request& Message::request() const {
  return has_request() ? *rq_.request_
                      : ::rpc::Request::default_instance();
}
inline ::rpc::Request* Message::mutable_request() {
  if (!has_request()) {
    clear_rq();
    set_has_request();
    rq_.request_ = new ::rpc::Request;
  }
  return rq_.request_;
}
inline ::rpc::Request* Message::release_request() {
  if (has_request()) {
    clear_has_rq();
    ::rpc::Request* temp = rq_.request_;
    rq_.request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Message::set_allocated_request(::rpc::Request* request) {
  clear_rq();
  if (request) {
    set_has_request();
    rq_.request_ = request;
  }
}

// optional .rpc.Reply reply = 3;
inline bool Message::has_reply() const {
  return rq_case() == kReply;
}
inline void Message::set_has_reply() {
  _oneof_case_[0] = kReply;
}
inline void Message::clear_reply() {
  if (has_reply()) {
    delete rq_.reply_;
    clear_has_rq();
  }
}
inline const ::rpc::Reply& Message::reply() const {
  return has_reply() ? *rq_.reply_
                      : ::rpc::Reply::default_instance();
}
inline ::rpc::Reply* Message::mutable_reply() {
  if (!has_reply()) {
    clear_rq();
    set_has_reply();
    rq_.reply_ = new ::rpc::Reply;
  }
  return rq_.reply_;
}
inline ::rpc::Reply* Message::release_reply() {
  if (has_reply()) {
    clear_has_rq();
    ::rpc::Reply* temp = rq_.reply_;
    rq_.reply_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Message::set_allocated_reply(::rpc::Reply* reply) {
  clear_rq();
  if (reply) {
    set_has_reply();
    rq_.reply_ = reply;
  }
}

inline bool Message::has_rq() {
  return rq_case() != RQ_NOT_SET;
}
inline void Message::clear_has_rq() {
  _oneof_case_[0] = RQ_NOT_SET;
}
inline Message::RqCase Message::rq_case() const {
  return Message::RqCase(_oneof_case_[0]);
}

// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::rpc::Request_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rpc::Request_Type>() {
  return ::rpc::Request_Type_descriptor();
}
template <> struct is_proto_enum< ::rpc::Error_errorType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rpc::Error_errorType>() {
  return ::rpc::Error_errorType_descriptor();
}
template <> struct is_proto_enum< ::rpc::Message_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::rpc::Message_Type>() {
  return ::rpc::Message_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
